[tool.poetry]
name = "MolR"
version = "0.1.0"
description = "Implementation of the MolR embedding model"
authors = ["Hongwei Wang et al."]
packages = [
    { include = "src" }
]
include = ["saved/*"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
torch = "*"
matplotlib = "*"
scikit-learn = "*"
pysmiles = "*"
networkx = "*"
scipy = "*"
cython = "^3.0.11"
datasets = "^3.0.0"
rdkit = "*"

[tool.poetry.group.sage.dependencies]
sagemaker-inference = "*"
# sagemaker-training = "*"
jupyterlab = "*"

[tool.poetry.group.dev.dependencies]
mypy = "^1.6.1"
ruff = "^0.1.3"

[tool.ruff]
src = ["src", "tests", "notebooks"]
extend-exclude = ["__pycache__"]
line-length = 100
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "PL",  # pylint
    "I",  # isort
    "N",  # pep8-naming
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP",  # pyupgrade
    "RUF",  # ruff-specific rules
    "NPY",  # numpy-specific rules
]
output-format = "grouped"
ignore-init-module-imports = true
show-fixes = true

[tool.ruff.isort]
known-first-party = ["src", "tests"]

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["pydantic.validator"]

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.format]
quote-style = "single"
indent-style = "space"

[tool.mypy]
python_version = "3.11"
exclude = "(tests)"
plugins = [
  "pydantic.mypy",
]
show_error_codes = true
show_error_context = true
# https://mypy.readthedocs.io/en/stable/existing_code.html#introduce-stricter-options
strict = true

[[tool.mypy.overrides]]
module = [
    "src"
]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pylint."MESSAGES CONTROL"]
# We disable unspecified-encoding as we run our code in the same linux-based docker container only
disable = [
    "unspecified-encoding",
    "too-few-public-methods",
    "too-many-arguments",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "import-outside-toplevel",
]
# Ignore pylint/pydantic conflicts
ignored-classes = [
    "FieldInfo",
]
ignored-argument-names = "args"

[tool.bandit]
exclude_dirs = ["migrations", ".venv"]
skips = ["B101"]

[tool.pytest.ini_options]
markers = [
    "webtest: mark a test as a webtest."
]
required_plugins = [
    "pytest-asyncio>=0.21.1",
    # "pytest-cov>=4.1.0"
]
addopts = [
  "--strict-config",
  "--strict-markers",
  "--no-cov",
#   "--cov=src",
#   "--cov-report=xml",
#   "--cov-report=html",
#   "--cov-fail-under=80",  # TODO: create the task to cover code
]
xfail_strict = true
junit_family = "xunit2"

[tool.coverage.paths]
source = [
    "src",
]

#[tool.coverage.run]
#branch = true

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"
